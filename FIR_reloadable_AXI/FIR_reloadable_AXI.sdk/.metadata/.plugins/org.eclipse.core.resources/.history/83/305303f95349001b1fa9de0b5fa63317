/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */


/* ------------------------------------------------------------ */
/*				Include File Definitions						*/
/* ------------------------------------------------------------ */



#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "filter_L.h"

#include "timer_ps.h"
#include "xparameters.h"
#include "xuartps.h"
#include "audio_fun.h"
#include "xgpio.h"

#include "FIR_driver.h"

#define left_ear 0
#define right_ear 1



/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */

/*
 * XPAR redefines
 */
#define AUDIO_IIC_ID XPAR_XIICPS_0_DEVICE_ID
#define AUDIO_CTRL_BASEADDR XPAR_AXI_I2S_ADI_0_S_AXI_BASEADDR
#define SCU_TIMER_ID XPAR_SCUTIMER_DEVICE_ID
#define UART_BASEADDR XPAR_PS7_UART_1_BASEADDR
#define INPUT_BASEADDR XPAR_AXI_GPIO_0_BASEADDR
#define OUTPUT_BASEADDR XPAR_AXI_GPIO_1_BASEADDR

XIicPs Iic;

u32 recDataL; /* Left audio data */
u32 recDataR; /* Right audio data */

u32 left,right;


int main()
{

	xil_printf("\x1B[H"); //Set cursor to top left of terminal
xil_printf("\x1B[2J"); //Clear terminal
    init_platform();

   //filter init
    filter filter_instance;

    //load filter coef
    //set_filter_param(&filter_instance);




	// GPIO initialization

	XGpio input, output;
    int swState = 0;
    int prev_swState = 1;
    int btnState = 0;

    XGpio_Initialize(&input, XPAR_AXI_GPIO_0_DEVICE_ID);	//initialize input XGpio variable

	xil_printf("GPIO initialized\n\r");

	// Audio initialization

	AudioInitialize(SCU_TIMER_ID, AUDIO_IIC_ID, AUDIO_CTRL_BASEADDR);

	xil_printf("Audio initialized\n\r");



	// At this point, the Codec is configured in Bypass mode.
	// Comment everything below to use it that way.

	// Setting register to use DAC path (and disable Bypass)
	AudioRegSet(&Iic, 4, 0b000010000);

	// Resetting and enabling TX/RX Fifos
	Xil_Out32(AUDIO_CTRL_BASEADDR + I2S_RESET_REG, 0b110); //Reset RX/TX Fifo
	Xil_Out32(AUDIO_CTRL_BASEADDR + I2S_CTRL_REG, 0b011); //Enable RX Fifo, disable mute


	int azymuth = degrees_0;

	



	while(1)
	{
       swState = XGpio_DiscreteRead(&input, 2);
       swState =swState & 0b11;
     
	 if (prev_swState!=swState)
	 {
		 prev_swState = swState;
		 switch (swState)
	  {
	  case degrees_0:
		  filter_instance.azimuth = degrees_0; //azymuth 0 degrees
		  
		  break;
	    case degrees_90:
	    	 filter_instance.azimuth  = degrees_90; //azymuth 0 degrees
		   
		  break;
	  case degrees_180:
	    	 filter_instance.azimuth  = degrees_180; //azymuth 0 degrees
	  break;
	  default:
	      filter_instance.azimuth  = degrees_270;
		  break;
	  }
	  
     set_filter_param(&filter_instance);  

	 }
	 
	 



		// Recording of audio data. Width = 1 sample
				recDataL = I2SFifoRead(AUDIO_CTRL_BASEADDR);
				left =  filter_out(&filter_instance,recDataL,left_ear);
				//left = left>>2;



				recDataR = I2SFifoRead(AUDIO_CTRL_BASEADDR);
			right =  filter_out(&filter_instance,recDataR,right_ear);
		      //  right = right>>2;

				// Playback of audio data. Width = 1 sample
				I2SFifoWrite(AUDIO_CTRL_BASEADDR, left);
				I2SFifoWrite(AUDIO_CTRL_BASEADDR, right);


	}



    cleanup_platform();
    return 0;
}
