#include "filter_L.h"
#include "FIR_driver.h"
#define number_elements(x)  (sizeof(x) / sizeof((x)[0]))

void set_filter_param(filter* InstancePtr);
void array_copy(u32 *source,u32*dest,int size);

u32 get_sum_array(u32 *array, int size);
int azymuth = degrees_0;
int filter_order = 40; //change to 35 if problems
//signed long h_low[] = {44781,131838,-59907,-119747,10963,185918,50538,-240911,-159671,275395,323474,-264215,-554577,169836,884129,86625,-1430889,-801511,3015950,6930609,6930609,3015950,-801511,-1430889,86625,884129,169836,-554577,-264215,323474,275395,-159671,-240911,50538,185918,10963,-119747,-59907,131838,44781};
	signed int h_low[40] = {5212,-10736,-6902,-4364,-1178,2444,5120,5407,2719,-2120,-6975,-9187,-6781,398,10138,18182,19210,7549,-26177,-156160,156160,26177,-7549,-19210,-18182,-10138,-398,6781,9187,6975,2120,-2719,-5407,-5120,-2444,1178,4364,6902,10736,-5212};
	signed int h_low_blackman_window[40] = {0,-17,-96,-202,-225,-34,413,969,1295,993,-151,-1935,-3655,-4249,-2689,1553,8139,15809,22696,26922,26922,22696,15809,8139,1553,-2689,-4249,-3655,-1935,-151,993,1295,969,413,-34,-225,-202,-96,-17,0};
	signed int h_high_kaiser_44100 [40]= {-489,-1742,-2254,-1662,-120,1716,2940,2819,1177,-1424,-3823,-4717,-3244,521,5375,9205,9465,3471,-13359,-78053,78053,13359,-3471,-9465,-9205,-5375,-521,3244,4717,3823,1424,-1177,-2819,-2940,-1716,120,1662,2254,1742,489};
	//kaiser sampling freq 48kHz
	//signed int h_low_kaiser_48kHz={426,-969,-2115,-2479,-1794,-208,1725,3210,3514,2278,-277,-3324,-5637,-5973,-3500,1863,9319,17354,24127,27997,27997,24127,17354,9319,1863,-3500,-5973,-5637,-3324,-277,2278,3514,3210,1725,-208,-1794,-2479,-2115,-969,426};



	//u32   h_left[] =  { 0x000000AC, 0x00000201, 0x00000328, 0xFFFFFEAA, 0x0000053B, 0x00000114, 0x0000050C, 0x00000072, 0x000005A3, 0x00000184, 0x00000567, 0x00000172, 0x000005F2, 0x0000018E, 0x00000456, 0x000001EA, 0x000005E5, 0x000001CC, 0x0000030F, 0x000004B6, 0x0000003C, 0x0000098D, 0xFFFFF9CD, 0x00000F5A, 0xFFFFF222, 0x000017F8, 0xFFFFE6EA, 0x000024CE, 0xFFFFD830, 0x0000470B, 0xFFFFF465, 0x00008366, 0xFFFFF0AA, 0x0000C146, 0xFFFFB370, 0x0000DA11, 0xFFFDEA00, 0x0000E5F3, 0x00010CDA, 0xFFFF2DE8};
	//u32 h_right[] = { 0x000006C1, 0xFFFFFFF6, 0x000005A6, 0xFFFFFECF, 0x000007D8, 0xFFFFFFD5, 0x000006B4, 0xFFFFFE2A, 0x000006D3, 0x000000C0, 0x0000071E, 0xFFFFFFF5, 0x000005BB, 0x00000149, 0x0000076A, 0x00000183, 0x0000071F, 0xFFFFFE96, 0x0000097C, 0xFFFFFFEB, 0x00000773, 0xFFFFFF63, 0x000005BC, 0x00000196, 0x00000578, 0x0000018D, 0x00000404, 0x00000163, 0x0000049B, 0x000001BB, 0x0000044A, 0xFFFFFF6D, 0x000006C6, 0xFFFFFDDF, 0x00000E8C, 0x00001244, 0x0000301F, 0x000029F0, 0x000047F3, 0x00001FFF};

	u32   h_left[4][40] = {
	{0xFFFFFE6E, 0x000005FC, 0x00000296, 0x00000451, 0x00000008, 0x00000680, 0x00000143, 0x00000569, 0x000000E7, 0x00000505, 0x0000037C, 0x00000469, 0x000001FA, 0x000005C0, 0x000002FE, 0x000004DD, 0x0000013B, 0x0000083E, 0xFFFFFF86, 0x00000764, 0xFFFFFEFB, 0x000008DE, 0xFFFFFF07, 0x0000064A, 0x00000116, 0x000003F1, 0x000004D1, 0xFFFFFE8B, 0x000009D1, 0xFFFFF857, 0x00001161, 0xFFFFF226, 0x00003078, 0x00000B3F, 0x00005862, 0x00001003, 0x00008440, 0xFFFFE91A, 0x00006378, 0xFFFE4947},
	{0xFFFFFF9A, 0xFFFFFD79, 0x00000284, 0x00000148, 0x00000190, 0x0000013A, 0x00000380, 0x00000414, 0x000003A2, 0x00000283, 0x000004C6, 0x000002F5, 0x0000044A, 0x00000032, 0x00000580, 0xFFFFFE76, 0x0000075A, 0xFFFFFAD8, 0x00000A0B, 0xFFFFF91C, 0x00003A81, 0x00004AF1, 0x00006FF9, 0x00001B00, 0x000084CF, 0xFFFFF6EF, 0x00007249, 0xFFFC2CDE, 0x00026D15, 0x000341BD, 0x0000E86C, 0x0001CF4B, 0xFFFF8D42, 0x00009946, 0xFFFFF70E, 0xFFFDF3C6, 0x00001AA5, 0x0000E888, 0x0001481C, 0xFFFDED28},
	{0x00000609, 0xFFFFFEE5, 0x000004CB, 0x0000018C, 0x000002B0, 0x0000034A, 0x000001D2, 0x0000024A, 0x000004BA, 0x000002B9, 0x0000058E, 0x0000011A, 0x000006E5, 0x0000013A, 0x00000796, 0x0000001E, 0x0000067A, 0x00000126, 0x000006CF, 0xFFFFFEAC, 0x00000836, 0xFFFFFED5, 0x00000810, 0xFFFFFE00, 0x000009C8, 0xFFFFF9FD, 0x00000DBC, 0xFFFFF4DE, 0x00001A3F, 0x0000012B, 0x00003EBE, 0x00000877, 0x00005A20, 0x00000784, 0x00007457, 0xFFFF80B0, 0xFFFFB27A, 0x0000C4FA, 0x000073B0, 0x0000A952},
	{0x000002C7, 0x00000380, 0x0000039C, 0x000002CF, 0x000003B9, 0x00000298, 0x0000042C, 0x000002B1, 0x000002BA, 0x00000358, 0x00000493, 0x00000229, 0x000003FE, 0x000002E7, 0x00000438, 0x00000267, 0x0000051A, 0x0000020F, 0x00000556, 0x00000016, 0x000006F0, 0x00000024, 0x00000629, 0xFFFFFF9A, 0x00000576, 0x0000011A, 0x00000564, 0xFFFFFFFC, 0x000004D2, 0x00000294, 0x0000043E, 0x00000064, 0x00000586, 0x00000253, 0x0000034F, 0x00000293, 0x00000532, 0x00000199, 0x000005D9, 0x00000073},
	};

	u32   h_right[4][40] = {
	{0x00000117, 0x000002B2, 0x000007F6, 0x000000C0, 0x000005D9, 0xFFFFFF94, 0x00000523, 0x00000307, 0x000004BF, 0x00000236, 0x000003CD, 0x00000296, 0x000005FB, 0x000002DF, 0x00000471, 0x0000035A, 0x000003B0, 0x000005DF, 0x00000192, 0x00000507, 0x000001EA, 0x000005E7, 0x000001CA, 0x00000297, 0x000004A5, 0x000000FE, 0x000006A3, 0xFFFFFD9F, 0x000008FE, 0xFFFFF9D5, 0x00000E5A, 0xFFFFF536, 0x00002697, 0x00001180, 0x00005AC0, 0x00001EA9, 0x000075DE, 0xFFFFED6C, 0x0000885D, 0xFFFE62CE},
	{0x00000454, 0xFFFFFF8A, 0x0000055B, 0x00000414, 0x000002D2, 0x00000240, 0x00000340, 0x0000036E, 0x00000547, 0x00000146, 0x0000051B, 0x0000008F, 0x000007E4, 0x00000042, 0x00000693, 0xFFFFFF38, 0x00000770, 0x000000BD, 0x000005DB, 0x00000127, 0x00000401, 0x000003C7, 0x0000033E, 0x00000408, 0x00000259, 0x000003B6, 0x000002FE, 0x000004AD, 0x00000155, 0x000005DB, 0x000000E5, 0x00000660, 0x00000019, 0x00000506, 0x00000273, 0x00000470, 0x00000215, 0x0000052C, 0x000001A8, 0x00000583},
	{0x0000055B, 0xFFFFFC06, 0x000003E7, 0x000000A6, 0x00000405, 0x00000224, 0x0000010A, 0x000002DB, 0x00000418, 0x00000399, 0x00000536, 0x000001B5, 0x000006CE, 0x000000D0, 0x0000080F, 0xFFFFFF72, 0x00000681, 0xFFFFFF8A, 0x000007D9, 0xFFFFFEDE, 0x00000774, 0xFFFFFDB8, 0x00000930, 0xFFFFFE39, 0x000008F7, 0xFFFFFBBA, 0x00000B5C, 0xFFFFF889, 0x0000178A, 0x00000604, 0x000037B7, 0x00000B41, 0x000057C3, 0x00001162, 0x000066B7, 0xFFFF7A1B, 0xFFFFC256, 0x0001138C, 0xFFFFE58D, 0x0000A44D},
	{0x000008EF, 0xFFFFF711, 0x00000A2C, 0xFFFFF9D8, 0x00000969, 0xFFFFFDB4, 0x0000052B, 0x0000040A, 0x0000017E, 0x00000676, 0x00000242, 0x0000057F, 0x000000D7, 0x00000554, 0x000001DE, 0x00000304, 0x000002FD, 0xFFFFFEC1, 0x0000096A, 0xFFFFF541, 0x00003BD1, 0x0000406B, 0x00007A0B, 0x00000D4E, 0x00009AE4, 0xFFFFDA07, 0x0000A3E0, 0xFFFC18D8, 0x000246C9, 0x00032956, 0x0000E6E9, 0x00016468, 0x00013810, 0xFFFF75A1, 0xFFFED917, 0xFFFEF012, 0x00017B79, 0x00006A8D, 0xFFFEDF29, 0xFFFF77F0},
	};



	signed int h_low_kaiser_44100 [40] = {1948,1225,-226,-1754,-2583,-2184,-573,1615,3345,3629,2013,-1095,-4446,-6345,-5282,-591,7173,16280,24334,29052,29052,24334,16280,7173,-591,-5282,-6345,-4446,-1095,2013,3629,3345,1615,-573,-2184,-2583,-1754,-226,1225,1948};
    signed int h_low_kaiser[40]= {410,-985,-2123,-2477,-1782,-190,1740,3216,3509,2263,-295,-3338,-5642,-5966,-3484,1881,9333,17358,24122,27985,27985,24122,17358,9333,1881,-3484,-5966,-5642,-3338,-295,2263,3509,3216,1740,-190,-1782,-2477,-2123,-985,410};
	signed long  h_high[40] =  {1085,-1471,-1934,265,2335,196,-3376,-1588,4078,3683,-4312,-6732,3572,11001,-1065,-17404,-5391,30263,28893,-126792,126792,-28893,-30263,5391,17404,1065,-11001,-3572,6732,4312,-3683,-4078,1588,3376,-196,-2335,-265,1934,1471,-1085};

  //signed int  h_L[] = {8388608,-8388608,345,-1019,96,749,-54,658,387,607,283,487,331,765,368,569,429,472,752,201,643,245,756,229,332,594,127,850,-304,1151,-790,1837,-1381,4940,2240,11616,3925,15087,-2378,17455,-52889};
  //signed int  h_R[]= {-201,766,331,553,4,832,162,693,116,642,446,565,253,736,383,623,158,1055,-61,946,-130,1135,-124,805,139,504,617,-187,1257,-981,2224,-1773,6204,1440,11313,2050,16928,-2931,12732,-56157};

   // u32 h[] = {0xE0004000};


void array_copy(u32 *source,u32 *dest,int size)
{
    int i;
    for(i=0; i<size; i++)
    {

     //   dest[i] = source[i];

    	*dest = *source;
    	source++;
    	    	dest++;
    }
}

void set_filter_param(filter* InstancePtr)
{

	 InstancePtr->azimuth = azymuth; //azymuth in degrees
    InstancePtr->order = filter_order;

    array_copy(&h_left[InstancePtr->azimuth][0],&InstancePtr->h_L,InstancePtr->order);
    array_copy(&h_right[InstancePtr->azimuth][0],&InstancePtr->h_R,InstancePtr->order);

    //write the unity gain values
    // int size = number_elements(InstancePtr->h_R);//get the number of elements in the array
    InstancePtr->h_R_normalization_factor = get_sum_array(InstancePtr->h_R,filter_order);
    InstancePtr->h_L_normalization_factor = get_sum_array(InstancePtr->h_L,filter_order);
 
    InstancePtr->baseadrr_L = AXI_FIR_L_addres;
    InstancePtr->baseadrr_R = AXI_FIR_R_addres;
    InstancePtr->reg_offset = coef_register_offset;
    InstancePtr->last_index_sent = 0;

    charge_coef(*InstancePtr, InstancePtr->order);
}

u32 get_sum_array(u32 *array, int size)
{
    u32 sum = 0;
    
    for (int i = 0; i < size; i++)
    {
        sum+=array[i];
    }
    return sum;
}
