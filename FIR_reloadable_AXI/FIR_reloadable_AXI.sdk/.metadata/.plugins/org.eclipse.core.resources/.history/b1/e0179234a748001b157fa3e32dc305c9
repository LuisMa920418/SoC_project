#include "filter_L.h"
#include "FIR_driver.h"

void set_filter_param(filter* InstancePtr);
void array_copy(u32 *source,u32*dest,int size);

int filter_order = 35;
//signed long h_low[] = {44781,131838,-59907,-119747,10963,185918,50538,-240911,-159671,275395,323474,-264215,-554577,169836,884129,86625,-1430889,-801511,3015950,6930609,6930609,3015950,-801511,-1430889,86625,884129,169836,-554577,-264215,323474,275395,-159671,-240911,50538,185918,10963,-119747,-59907,131838,44781};
	signed int h_low[40] = {5212,-10736,-6902,-4364,-1178,2444,5120,5407,2719,-2120,-6975,-9187,-6781,398,10138,18182,19210,7549,-26177,-156160,156160,26177,-7549,-19210,-18182,-10138,-398,6781,9187,6975,2120,-2719,-5407,-5120,-2444,1178,4364,6902,10736,-5212};
	signed int h_low_blackman_window[40] = {0,-17,-96,-202,-225,-34,413,969,1295,993,-151,-1935,-3655,-4249,-2689,1553,8139,15809,22696,26922,26922,22696,15809,8139,1553,-2689,-4249,-3655,-1935,-151,993,1295,969,413,-34,-225,-202,-96,-17,0};
	signed int h_high_kaiser_44100 [40]= {-489,-1742,-2254,-1662,-120,1716,2940,2819,1177,-1424,-3823,-4717,-3244,521,5375,9205,9465,3471,-13359,-78053,78053,13359,-3471,-9465,-9205,-5375,-521,3244,4717,3823,1424,-1177,-2819,-2940,-1716,120,1662,2254,1742,489};
	//kaiser sampling freq 48kHz
	//signed int h_low_kaiser_48kHz={426,-969,-2115,-2479,-1794,-208,1725,3210,3514,2278,-277,-3324,-5637,-5973,-3500,1863,9319,17354,24127,27997,27997,24127,17354,9319,1863,-3500,-5973,-5637,-3324,-277,2278,3514,3210,1725,-208,-1794,-2479,-2115,-969,426};



	u32   h_left[] =  { 0x000000AC, 0x00000201, 0x00000328, 0xFFFFFEAA, 0x0000053B, 0x00000114, 0x0000050C, 0x00000072, 0x000005A3, 0x00000184, 0x00000567, 0x00000172, 0x000005F2, 0x0000018E, 0x00000456, 0x000001EA, 0x000005E5, 0x000001CC, 0x0000030F, 0x000004B6, 0x0000003C, 0x0000098D, 0xFFFFF9CD, 0x00000F5A, 0xFFFFF222, 0x000017F8, 0xFFFFE6EA, 0x000024CE, 0xFFFFD830, 0x0000470B, 0xFFFFF465, 0x00008366, 0xFFFFF0AA, 0x0000C146, 0xFFFFB370, 0x0000DA11, 0xFFFDEA00, 0x0000E5F3, 0x00010CDA, 0xFFFF2DE8};
	u32 h_right[] = { 0x000006C1, 0xFFFFFFF6, 0x000005A6, 0xFFFFFECF, 0x000007D8, 0xFFFFFFD5, 0x000006B4, 0xFFFFFE2A, 0x000006D3, 0x000000C0, 0x0000071E, 0xFFFFFFF5, 0x000005BB, 0x00000149, 0x0000076A, 0x00000183, 0x0000071F, 0xFFFFFE96, 0x0000097C, 0xFFFFFFEB, 0x00000773, 0xFFFFFF63, 0x000005BC, 0x00000196, 0x00000578, 0x0000018D, 0x00000404, 0x00000163, 0x0000049B, 0x000001BB, 0x0000044A, 0xFFFFFF6D, 0x000006C6, 0xFFFFFDDF, 0x00000E8C, 0x00001244, 0x0000301F, 0x000029F0, 0x000047F3, 0x00001FFF};


	signed int h_low_kaiser_44100 [40] = {1948,1225,-226,-1754,-2583,-2184,-573,1615,3345,3629,2013,-1095,-4446,-6345,-5282,-591,7173,16280,24334,29052,29052,24334,16280,7173,-591,-5282,-6345,-4446,-1095,2013,3629,3345,1615,-573,-2184,-2583,-1754,-226,1225,1948};
    signed int h_low_kaiser[40]= {410,-985,-2123,-2477,-1782,-190,1740,3216,3509,2263,-295,-3338,-5642,-5966,-3484,1881,9333,17358,24122,27985,27985,24122,17358,9333,1881,-3484,-5966,-5642,-3338,-295,2263,3509,3216,1740,-190,-1782,-2477,-2123,-985,410};
	signed long  h_high[40] =  {1085,-1471,-1934,265,2335,196,-3376,-1588,4078,3683,-4312,-6732,3572,11001,-1065,-17404,-5391,30263,28893,-126792,126792,-28893,-30263,5391,17404,1065,-11001,-3572,6732,4312,-3683,-4078,1588,3376,-196,-2335,-265,1934,1471,-1085};

  //signed int  h_L[] = {8388608,-8388608,345,-1019,96,749,-54,658,387,607,283,487,331,765,368,569,429,472,752,201,643,245,756,229,332,594,127,850,-304,1151,-790,1837,-1381,4940,2240,11616,3925,15087,-2378,17455,-52889};
  //signed int  h_R[]= {-201,766,331,553,4,832,162,693,116,642,446,565,253,736,383,623,158,1055,-61,946,-130,1135,-124,805,139,504,617,-187,1257,-981,2224,-1773,6204,1440,11313,2050,16928,-2931,12732,-56157};

   // u32 h[] = {0xE0004000};


void array_copy(u32 *source,u32 *dest,int size)
{
    int i;
    for(i=0; i<size; i++)
    {

     //   dest[i] = source[i];

    	*dest = *source;
    	source++;
    	    	dest++;
    }
}

void set_filter_param(filter* InstancePtr)
{

    InstancePtr->order = filter_order;
    array_copy(&h_left,&InstancePtr->h_L,InstancePtr->order);
    array_copy(&h_right,&InstancePtr->h_R,InstancePtr->order);
    InstancePtr->baseadrr_L = AXI_FIR_L_addres;
    InstancePtr->baseadrr_R = AXI_FIR_R_addres;
    InstancePtr->reg_offset = coef_register_offset;
    InstancePtr->last_index_sent = 0;

    charge_coef(*InstancePtr, InstancePtr->order);
}
